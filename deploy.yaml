AWSTemplateFormatVersion: '2010-09-09'
Description: Bucket Antivirus Quickstart Template
Parameters:
  AVBucketType:
    Type: String
    Description: Specifies if the bucket to hold the AV deinitions should be "public"
      or "private". Only choose "public" if other accounts need to access this bucket."
    Default: private
    AllowedValues:
    - public
    - private
  SourceBucket:
    Type: String
    Description: Name of the source bucket whose objects will be scanned. If more
      than one source bucket, the others will have to be manually added to the AV
      Scanner Policy after creation.
    AllowedPattern: .+
    Default: signed-code
  LambdaFileS3BucketName:
    Type: String
    Description: Name of s3 bucket where lambda.zip file is uploaded
    Default: signed-code
  AVScannerFunctionAlias:
    Type: String
    Description: Name of Alias of AV Scan Lambda Function.
    Default: avScannerAlias
  AVScannerFunction:
    Type: String
    Description: Name of AV Scan Lambda Function.
    Default: avScannerNTest
  AVDefinitionsFunctionAlias:
    Type: String
    Description: Name of Alias of Definition Lambda Function.
    Default: avUpdateDefinitionsAlias
  AVDefinitionsFunction:
    Type: String
    Description: Name of Definition Lambda Function.
    Default: avUpdateDefinitionsNTest
  IAMDefinitionsLambdaRole:
    Type: String
    Description: Name of IAM Role for Definition.
    Default: AVDefinitionsLambdaRoleNTest
  IAMAVScannerLambdaRole:
    Type: String
    Description: Name of IAM Role for AV scanner.
    Default: AVScannerLambdaRoleNTest
  IAMPolicyAVDefinitions:
    Type: String
    Description: Name of IAM Policy for AV Definitions.
    Default: AVDefinitionsLambdaPolicyNTest
  IAMPolicyAVScanner:
    Type: String
    Description: Name of IAM Policy for AV scanner.
    Default: AVScannerLambdaPolicyNTest
  LambdaAVUpdateDefinitionsScheduleRule:
    Type: String
    Description: Name of Trigger rule for av definitions function.
    Default: LambdaAVUpdateDefinitionsScheduleNTest
Conditions:
  publicBucket:
    Fn::Equals:
    - Ref: AVBucketType
    - public
Resources:
  S3BucketAVDefinitions:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
        - '-'
        - - antivirus-definitions
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      PublicAccessBlockConfiguration:
        BlockPublicAcls:
          Fn::If:
          - publicBucket
          - false
          - true
        BlockPublicPolicy:
          Fn::If:
          - publicBucket
          - false
          - true
        IgnorePublicAcls:
          Fn::If:
          - publicBucket
          - false
          - true
        RestrictPublicBuckets:
          Fn::If:
          - publicBucket
          - false
          - true
      Tags:
      - Key: Service
        Value: bucket-antivirus
      VersioningConfiguration:
        Status: Suspended
    Metadata:
      SamResourceId: S3BucketAVDefinitions
  S3BucketPolicyAVDefinitions:
    Type: AWS::S3::BucketPolicy
    Condition: publicBucket
    Properties:
      Bucket:
        Ref: S3BucketAVDefinitions
      PolicyDocument:
        Statement:
        - Sid: AllowPublic
          Action:
          - s3:GetObject
          - s3:GetObjectTagging
          Effect: Allow
          Principal:
            AWS:
            - '*'
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}/*
            - BucketName:
                Ref: S3BucketAVDefinitions
    Metadata:
      SamResourceId: S3BucketPolicyAVDefinitions
  IamRoleAVDefinitions:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Ref: IAMDefinitionsLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Tags:
      - Key: Service
        Value: bucket-antivirus
    Metadata:
      SamResourceId: IamRoleAVDefinitions
  IamRoleAVScanner:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Ref: IAMAVScannerLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Tags:
      - Key: Service
        Value: bucket-antivirus
    Metadata:
      SamResourceId: IamRoleAVScanner
  IamPolicyAVDefinitions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Ref: IAMPolicyAVDefinitions
      Roles:
      - Ref: IamRoleAVDefinitions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: WriteCloudWatchLogs
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
        - Sid: S3GetAndPutWithTagging
          Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectTagging
          - s3:PutObject
          - s3:PutObjectTagging
          - s3:PutObjectVersionTagging
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}/*
            - BucketName:
                Ref: S3BucketAVDefinitions
        - Sid: S3HeadObject
          Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}/*
            - BucketName:
                Ref: S3BucketAVDefinitions
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}
            - BucketName:
                Ref: S3BucketAVDefinitions
    Metadata:
      SamResourceId: IamPolicyAVDefinitions
  IamPolicyAVScanner:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Ref: IAMPolicyAVScanner
      Roles:
      - Ref: IamRoleAVScanner
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: WriteCloudWatchLogs
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
        - Sid: S3AVScan
          Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectTagging
          - s3:GetObjectVersion
          - s3:PutObjectTagging
          - s3:PutObject
          - s3:DeleteObject
          - s3:PutObjectVersionTagging
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${SourceBucketName}/*
            - SourceBucketName:
                Ref: SourceBucket
        - Sid: S3AVDefinitions
          Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectTagging
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}/*
            - BucketName:
                Ref: S3BucketAVDefinitions
        - Sid: KmsDecrypt
          Effect: Allow
          Action:
          - kms:Decrypt
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${SourceBucketName}/*
            - SourceBucketName:
                Ref: SourceBucket
        - Sid: SNSPublic
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - arn:aws:sns:::<av-scan-start>
          - arn:aws:sns:::<av-status>
        - Sid: S3HeadObject
          Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}/*
            - BucketName:
                Ref: S3BucketAVDefinitions
          - Fn::Sub:
            - arn:aws:s3:::${BucketName}
            - BucketName:
                Ref: S3BucketAVDefinitions
    Metadata:
      SamResourceId: IamPolicyAVScanner
  LambdaAVUpdateDefinitions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Ref: AVDefinitionsFunction
      Description: LambdaFunction to update the AntiVirus definitions in the AV Definitions
        bucket.
      Runtime: python3.10
      Code:
        S3Bucket:
          Ref: LambdaFileS3BucketName
        S3Key: lambda.zip
      Handler: update.lambda_handler
      MemorySize: 1024
      Timeout: 300
      Role:
        Fn::GetAtt:
        - IamRoleAVDefinitions
        - Arn
      Environment:
        Variables:
          AV_DEFINITION_S3_BUCKET:
            Ref: S3BucketAVDefinitions
      Tags:
      - Key: Service
        Value: bucket-antivirus
    Metadata:
      SamResourceId: LambdaAVUpdateDefinitions
  LambdaAVUpdateDefinitionsSchedule:
    Type: AWS::Events::Rule
    DependsOn:
    - LambdaAVUpdateDefinitions
    Properties:
      Name:
        Ref: LambdaAVUpdateDefinitionsScheduleRule
      Description: A schedule for the AV Update Definitions Lambda function.
      ScheduleExpression: rate(3 hours)
      State: ENABLED
      Targets:
      - Arn:
          Fn::Sub: ${LambdaAVUpdateDefinitions.Arn}
        Id: LambdaAVUpdateDefinitionsSchedule
    Metadata:
      SamResourceId: LambdaAVUpdateDefinitionsSchedule
  LambdaAVUpdateDefinitionsSchedulePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - LambdaAVUpdateDefinitionsSchedule
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::Sub: ${LambdaAVUpdateDefinitions.Arn}
      Principal: events.amazonaws.com
      SourceArn:
        Fn::Sub: ${LambdaAVUpdateDefinitionsSchedule.Arn}
    Metadata:
      SamResourceId: LambdaAVUpdateDefinitionsSchedulePermission
  LambdaAVScanner:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Ref: AVScannerFunction
      Description: LambdaFunction to scan newly uploaded objects in S3.
      Runtime: python3.10
      Code:
        S3Bucket:
          Ref: LambdaFileS3BucketName
        S3Key: lambda.zip
      Handler: scan.lambda_handler
      MemorySize: 1500
      Timeout: 300
      Role:
        Fn::GetAtt:
        - IamRoleAVScanner
        - Arn
      Environment:
        Variables:
          AV_DEFINITION_S3_BUCKET:
            Ref: S3BucketAVDefinitions
      Tags:
      - Key: Service
        Value: bucket-antivirus
    Metadata:
      SamResourceId: LambdaAVScanner
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - LambdaAVScanner
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::${SourceBucket}
    Metadata:
      SamResourceId: LambdaInvokePermission
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetBucketNotification
            - s3:PutBucketNotification
            Resource:
              Fn::Sub: arn:aws:s3:::${SourceBucket}
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
    Metadata:
      SamResourceId: LambdaIAMRole
  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaIAMRole
        - Arn
      Code:
        ZipFile: "\nfrom __future__ import print_function\nimport json\nimport boto3\n\
          import cfnresponse\n\nSUCCESS = \"SUCCESS\"\nFAILED = \"FAILED\"\n\nprint('Loading\
          \ function')\ns3 = boto3.resource('s3')\n\ndef lambda_handler(event, context):\n\
          \    print(\"Received event: \" + json.dumps(event, indent=2))\n    responseData={}\n\
          \    try:\n        if event['RequestType'] == 'Delete':\n            print(\"\
          Request Type:\",event['RequestType'])\n            Bucket=event['ResourceProperties']['Bucket']\n\
          \            delete_notification(Bucket)\n            print(\"Sending response\
          \ to custom resource after Delete\")\n        elif event['RequestType']\
          \ == 'Create' or event['RequestType'] == 'Update':\n            print(\"\
          Request Type:\",event['RequestType'])\n            LambdaArn=event['ResourceProperties']['LambdaArn']\n\
          \            Bucket=event['ResourceProperties']['Bucket']\n            add_notification(LambdaArn,\
          \ Bucket)\n            responseData={'Bucket':Bucket}\n            print(\"\
          Sending response to custom resource\")\n        responseStatus = 'SUCCESS'\n\
          \    except Exception as e:\n        print('Failed to process:', e)\n  \
          \      responseStatus = 'FAILED'\n        responseData = {'Failure': 'Something\
          \ bad happened.'}\n    cfnresponse.send(event, context, responseStatus,\
          \ responseData)\n\ndef add_notification(LambdaArn, Bucket):\n    bucket_notification\
          \ = s3.BucketNotification(Bucket)\n    response = bucket_notification.put(\n\
          \      NotificationConfiguration={\n        'LambdaFunctionConfigurations':\
          \ [\n          {\n              'LambdaFunctionArn': LambdaArn,\n      \
          \        'Events': [\n                  's3:ObjectCreated:*'\n         \
          \     ]\n          }\n        ]\n      }\n    )\n    print(\"Put request\
          \ completed....\")\n  \ndef delete_notification(Bucket):\n    bucket_notification\
          \ = s3.BucketNotification(Bucket)\n    response = bucket_notification.put(\n\
          \        NotificationConfiguration={}\n    )\n    print(\"Delete request\
          \ completed....\")\n"
      Runtime: python3.10
      Timeout: 50
    Metadata:
      SamResourceId: CustomResourceLambdaFunction
  LambdaTrigger:
    Type: Custom::LambdaTrigger
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CustomResourceLambdaFunction
        - Arn
      LambdaArn:
        Fn::GetAtt:
        - LambdaAVScanner
        - Arn
      Bucket:
        Ref: SourceBucket
    Metadata:
      SamResourceId: LambdaTrigger
  versionScanner:
    Type: AWS::Lambda::Version
    DependsOn: LambdaAVScanner
    Properties:
      FunctionName:
        Ref: LambdaAVScanner
      Description: v3
    Metadata:
      SamResourceId: versionScanner
  aliasScanner:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: LambdaAVScanner
      FunctionVersion:
        Fn::GetAtt:
        - versionScanner
        - Version
      Name:
        Ref: AVScannerFunctionAlias
    Metadata:
      SamResourceId: aliasScanner
  versionDefinition:
    Type: AWS::Lambda::Version
    DependsOn: LambdaAVUpdateDefinitions
    Properties:
      FunctionName:
        Ref: LambdaAVUpdateDefinitions
      Description: v3
    Metadata:
      SamResourceId: versionDefinition
  aliasDefinition:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: LambdaAVUpdateDefinitions
      FunctionVersion:
        Fn::GetAtt:
        - versionDefinition
        - Version
      Name:
        Ref: AVDefinitionsFunctionAlias
    Metadata:
      SamResourceId: aliasDefinition
Outputs:
  S3BucketAvDefinitions:
    Value:
      Ref: S3BucketAVDefinitions
    Description: S3 Bucket for the AV Definitions
  SourceS3Bucket:
    Value:
      Ref: SourceBucket
    Description: Source S3 Bucket
  LambdaAVUpdateDefinitions:
    Value:
      Ref: LambdaAVUpdateDefinitions
    Description: Lambda function to update the Antivirus Definitions in its respective
      bucket
  LambdaAVScanner:
    Value:
      Ref: LambdaAVScanner
    Description: Lambda function to scan newly created S3 objects
  IamRoleAVScanner:
    Value:
      Ref: IamRoleAVScanner
    Description: IAM Role used by the Lambda Scanner function. Edit its policy to
      add/change source S3 buckets, and also to enable SNS functionality if desired
